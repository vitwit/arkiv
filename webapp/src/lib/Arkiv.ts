/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Arkiv {
  export type InstitutionStruct = {
    name: string;
    description: string;
    contactInfo: string;
    account: AddressLike;
    exists: boolean;
  };

  export type InstitutionStructOutput = [
    name: string,
    description: string,
    contactInfo: string,
    account: string,
    exists: boolean
  ] & {
    name: string;
    description: string;
    contactInfo: string;
    account: string;
    exists: boolean;
  };
}

export interface ArkivInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFile"
      | "getFileCid"
      | "getFileMetadata"
      | "getFilesByOwner"
      | "getInstitution"
      | "getKeyWord"
      | "getKeyWordFor"
      | "grantAccess"
      | "hasAccess"
      | "institutionList"
      | "institutions"
      | "keyWordCount"
      | "listInstitutions"
      | "listRecipients"
      | "listRevokedRecipients"
      | "registerInstitution"
      | "revokeAccess"
      | "storeKeyWordsBatch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "FileCreated"
      | "InstitutionRegistered"
      | "KeyWordsStored"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createFile",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFileCid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFileMetadata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFilesByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstitution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyWord",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyWordFor",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "institutionList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "institutions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keyWordCount",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listInstitutions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listRecipients",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listRevokedRecipients",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstitution",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storeKeyWordsBatch",
    values: [BytesLike, AddressLike, BytesLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "createFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFileCid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFileMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFilesByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKeyWord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeyWordFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "institutionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "institutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyWordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listInstitutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listRevokedRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeKeyWordsBatch",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [fileId: BytesLike, grantee: AddressLike];
  export type OutputTuple = [fileId: string, grantee: string];
  export interface OutputObject {
    fileId: string;
    grantee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [fileId: BytesLike, grantee: AddressLike];
  export type OutputTuple = [fileId: string, grantee: string];
  export interface OutputObject {
    fileId: string;
    grantee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FileCreatedEvent {
  export type InputTuple = [
    fileId: BytesLike,
    owner: AddressLike,
    cid: string,
    metadata: string
  ];
  export type OutputTuple = [
    fileId: string,
    owner: string,
    cid: string,
    metadata: string
  ];
  export interface OutputObject {
    fileId: string;
    owner: string;
    cid: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstitutionRegisteredEvent {
  export type InputTuple = [account: AddressLike, name: string];
  export type OutputTuple = [account: string, name: string];
  export interface OutputObject {
    account: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyWordsStoredEvent {
  export type InputTuple = [
    fileId: BytesLike,
    grantee: AddressLike,
    wordsStored: BigNumberish
  ];
  export type OutputTuple = [
    fileId: string,
    grantee: string,
    wordsStored: bigint
  ];
  export interface OutputObject {
    fileId: string;
    grantee: string;
    wordsStored: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Arkiv extends BaseContract {
  connect(runner?: ContractRunner | null): Arkiv;
  waitForDeployment(): Promise<this>;

  interface: ArkivInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFile: TypedContractMethod<
    [fileId: BytesLike, cid: string, metadata: string],
    [void],
    "nonpayable"
  >;

  getFileCid: TypedContractMethod<[fileId: BytesLike], [string], "view">;

  getFileMetadata: TypedContractMethod<[fileId: BytesLike], [string], "view">;

  getFilesByOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  getInstitution: TypedContractMethod<
    [account: AddressLike],
    [Arkiv.InstitutionStructOutput],
    "view"
  >;

  getKeyWord: TypedContractMethod<
    [fileId: BytesLike, wordIndex: BigNumberish],
    [string],
    "view"
  >;

  getKeyWordFor: TypedContractMethod<
    [fileId: BytesLike, account: AddressLike, wordIndex: BigNumberish],
    [string],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [fileId: BytesLike, grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAccess: TypedContractMethod<
    [fileId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  institutionList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  institutions: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, boolean] & {
        name: string;
        description: string;
        contactInfo: string;
        account: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  keyWordCount: TypedContractMethod<
    [fileId: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;

  listInstitutions: TypedContractMethod<
    [],
    [Arkiv.InstitutionStructOutput[]],
    "view"
  >;

  listRecipients: TypedContractMethod<[fileId: BytesLike], [string[]], "view">;

  listRevokedRecipients: TypedContractMethod<
    [fileId: BytesLike],
    [string[]],
    "view"
  >;

  registerInstitution: TypedContractMethod<
    [name: string, description: string, contactInfo: string],
    [void],
    "nonpayable"
  >;

  revokeAccess: TypedContractMethod<
    [fileId: BytesLike, grantee: AddressLike],
    [void],
    "nonpayable"
  >;

  storeKeyWordsBatch: TypedContractMethod<
    [
      fileId: BytesLike,
      grantee: AddressLike,
      encWords: BytesLike[],
      inputProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFile"
  ): TypedContractMethod<
    [fileId: BytesLike, cid: string, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFileCid"
  ): TypedContractMethod<[fileId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFileMetadata"
  ): TypedContractMethod<[fileId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFilesByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getInstitution"
  ): TypedContractMethod<
    [account: AddressLike],
    [Arkiv.InstitutionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKeyWord"
  ): TypedContractMethod<
    [fileId: BytesLike, wordIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKeyWordFor"
  ): TypedContractMethod<
    [fileId: BytesLike, account: AddressLike, wordIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [fileId: BytesLike, grantee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [fileId: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "institutionList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "institutions"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, boolean] & {
        name: string;
        description: string;
        contactInfo: string;
        account: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "keyWordCount"
  ): TypedContractMethod<
    [fileId: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "listInstitutions"
  ): TypedContractMethod<[], [Arkiv.InstitutionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "listRecipients"
  ): TypedContractMethod<[fileId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "listRevokedRecipients"
  ): TypedContractMethod<[fileId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "registerInstitution"
  ): TypedContractMethod<
    [name: string, description: string, contactInfo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [fileId: BytesLike, grantee: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storeKeyWordsBatch"
  ): TypedContractMethod<
    [
      fileId: BytesLike,
      grantee: AddressLike,
      encWords: BytesLike[],
      inputProofs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "FileCreated"
  ): TypedContractEvent<
    FileCreatedEvent.InputTuple,
    FileCreatedEvent.OutputTuple,
    FileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InstitutionRegistered"
  ): TypedContractEvent<
    InstitutionRegisteredEvent.InputTuple,
    InstitutionRegisteredEvent.OutputTuple,
    InstitutionRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "KeyWordsStored"
  ): TypedContractEvent<
    KeyWordsStoredEvent.InputTuple,
    KeyWordsStoredEvent.OutputTuple,
    KeyWordsStoredEvent.OutputObject
  >;

  filters: {
    "AccessGranted(bytes32,address)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(bytes32,address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "FileCreated(bytes32,address,string,string)": TypedContractEvent<
      FileCreatedEvent.InputTuple,
      FileCreatedEvent.OutputTuple,
      FileCreatedEvent.OutputObject
    >;
    FileCreated: TypedContractEvent<
      FileCreatedEvent.InputTuple,
      FileCreatedEvent.OutputTuple,
      FileCreatedEvent.OutputObject
    >;

    "InstitutionRegistered(address,string)": TypedContractEvent<
      InstitutionRegisteredEvent.InputTuple,
      InstitutionRegisteredEvent.OutputTuple,
      InstitutionRegisteredEvent.OutputObject
    >;
    InstitutionRegistered: TypedContractEvent<
      InstitutionRegisteredEvent.InputTuple,
      InstitutionRegisteredEvent.OutputTuple,
      InstitutionRegisteredEvent.OutputObject
    >;

    "KeyWordsStored(bytes32,address,uint256)": TypedContractEvent<
      KeyWordsStoredEvent.InputTuple,
      KeyWordsStoredEvent.OutputTuple,
      KeyWordsStoredEvent.OutputObject
    >;
    KeyWordsStored: TypedContractEvent<
      KeyWordsStoredEvent.InputTuple,
      KeyWordsStoredEvent.OutputTuple,
      KeyWordsStoredEvent.OutputObject
    >;
  };
}
