/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PairStruct = {
  from: AddressLike;
  fromName: string;
  fromDecimals: BigNumberish;
  to: AddressLike;
  toName: string;
  toDecimals: BigNumberish;
  allowed: boolean;
};

export type PairStructOutput = [
  from: string,
  fromName: string,
  fromDecimals: bigint,
  to: string,
  toName: string,
  toDecimals: bigint,
  allowed: boolean
] & {
  from: string;
  fromName: string;
  fromDecimals: bigint;
  to: string;
  toName: string;
  toDecimals: bigint;
  allowed: boolean;
};

export type PlanTokensStruct = { fromToken: AddressLike; toToken: AddressLike };

export type PlanTokensStructOutput = [fromToken: string, toToken: string] & {
  fromToken: string;
  toToken: string;
};

export type PlanTimingStruct = {
  startTime: BigNumberish;
  interval: BytesLike;
  lastExecutionTime: BytesLike;
  totalIntervals: BytesLike;
  executedIntervals: BytesLike;
};

export type PlanTimingStructOutput = [
  startTime: bigint,
  interval: string,
  lastExecutionTime: string,
  totalIntervals: string,
  executedIntervals: string
] & {
  startTime: bigint;
  interval: string;
  lastExecutionTime: string;
  totalIntervals: string;
  executedIntervals: string;
};

export type PlanAmountsStruct = {
  totalAmount: BytesLike;
  remainingAmount: BytesLike;
  amountPerInterval: BytesLike;
  pendingOut: BytesLike;
};

export type PlanAmountsStructOutput = [
  totalAmount: string,
  remainingAmount: string,
  amountPerInterval: string,
  pendingOut: string
] & {
  totalAmount: string;
  remainingAmount: string;
  amountPerInterval: string;
  pendingOut: string;
};

export type PlanMetaStruct = { requestId: BigNumberish; planId: BigNumberish };

export type PlanMetaStructOutput = [requestId: bigint, planId: bigint] & {
  requestId: bigint;
  planId: bigint;
};

export interface ConfidentialDCABatchInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BATCH_LIMIT"
      | "USDC"
      | "_escrow"
      | "_refund"
      | "allPairs"
      | "allowedPairs"
      | "batchReqIdToBatchId"
      | "batches"
      | "cancelPlan"
      | "cancelReqIdToSender"
      | "cancelRequestIdToPlanId"
      | "cancelRequestProcessed"
      | "createPlan"
      | "depositToPlan"
      | "executors"
      | "getAllPairs"
      | "nextPlanId"
      | "onBatchAmount"
      | "onCancelPlanDecrypt"
      | "onCreatePlanDecryption"
      | "onWithdrawCallback"
      | "owner"
      | "pairBatchCursor"
      | "pausePlan"
      | "plans"
      | "renounceOwnership"
      | "requestIdToPlanId"
      | "requestIdToRecipient"
      | "requestIdToSender"
      | "requestProcessed"
      | "resumePlan"
      | "router"
      | "setExecutor"
      | "transferOwnership"
      | "triggerBatch"
      | "updateAllowedPair"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchExecuted"
      | "BatchTriggered"
      | "DecryptionFulfilled"
      | "ExecutorSet"
      | "OwnershipTransferred"
      | "PairUpdated"
      | "PlanCancelled"
      | "PlanCreated"
      | "PlanDeposit"
      | "TransferCompleted"
      | "TransferFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BATCH_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_escrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_refund",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedPairs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchReqIdToBatchId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelReqIdToSender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequestIdToPlanId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequestProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlan",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPlanId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onBatchAmount",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onCancelPlanDecrypt",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onCreatePlanDecryption",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onWithdrawCallback",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairBatchCursor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pausePlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToPlanId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToRecipient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToSender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resumePlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setExecutor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerBatch",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedPair",
    values: [
      AddressLike,
      string,
      BigNumberish,
      AddressLike,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BATCH_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchReqIdToBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelReqIdToSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequestIdToPlanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequestProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPlan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPlanId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onBatchAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCancelPlanDecrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCreatePlanDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onWithdrawCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairBatchCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pausePlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToPlanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resumePlan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BatchExecutedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    batchId: bigint,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    batchId: bigint;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchTriggeredEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    toToken: AddressLike,
    planCount: BigNumberish
  ];
  export type OutputTuple = [
    batchId: bigint,
    toToken: string,
    planCount: bigint
  ];
  export interface OutputObject {
    batchId: bigint;
    toToken: string;
    planCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorSetEvent {
  export type InputTuple = [executor: AddressLike, allowed: boolean];
  export type OutputTuple = [executor: string, allowed: boolean];
  export interface OutputObject {
    executor: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairUpdatedEvent {
  export type InputTuple = [
    fromToken: AddressLike,
    toToken: AddressLike,
    allowed: boolean
  ];
  export type OutputTuple = [
    fromToken: string,
    toToken: string,
    allowed: boolean
  ];
  export interface OutputObject {
    fromToken: string;
    toToken: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanCancelledEvent {
  export type InputTuple = [planId: BigNumberish];
  export type OutputTuple = [planId: bigint];
  export interface OutputObject {
    planId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanCreatedEvent {
  export type InputTuple = [planId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [planId: bigint, owner: string];
  export interface OutputObject {
    planId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanDepositEvent {
  export type InputTuple = [planId: BigNumberish, amount: BytesLike];
  export type OutputTuple = [planId: bigint, amount: string];
  export interface OutputObject {
    planId: bigint;
    amount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferCompletedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    sender: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    sender: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferFailedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    requestId: bigint,
    sender: string,
    recipient: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    requestId: bigint;
    sender: string;
    recipient: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialDCABatch extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialDCABatch;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialDCABatchInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BATCH_LIMIT: TypedContractMethod<[], [bigint], "view">;

  USDC: TypedContractMethod<[], [string], "view">;

  _escrow: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  _refund: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  allPairs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint, boolean] & {
        from: string;
        fromName: string;
        fromDecimals: bigint;
        to: string;
        toName: string;
        toDecimals: bigint;
        allowed: boolean;
      }
    ],
    "view"
  >;

  allowedPairs: TypedContractMethod<[key: BytesLike], [boolean], "view">;

  batchReqIdToBatchId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  batches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, boolean] & {
        batchId: bigint;
        fromToken: string;
        toToken: string;
        totalInEnc: string;
        slotTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  cancelPlan: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  cancelReqIdToSender: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  cancelRequestIdToPlanId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  cancelRequestProcessed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  createPlan: TypedContractMethod<
    [
      toToken: AddressLike,
      startTime: BigNumberish,
      encInterval: BytesLike,
      encTotalAmount: BytesLike,
      encAmountPerInterval: BytesLike,
      encTotalIntervals: BytesLike,
      proofs: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  depositToPlan: TypedContractMethod<
    [planId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executors: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getAllPairs: TypedContractMethod<[], [PairStructOutput[]], "view">;

  nextPlanId: TypedContractMethod<[], [bigint], "view">;

  onBatchAmount: TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedValue: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  onCancelPlanDecrypt: TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedAmount: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  onCreatePlanDecryption: TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedAmount: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  onWithdrawCallback: TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedValue: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pairBatchCursor: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  pausePlan: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  plans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        PlanTokensStructOutput,
        PlanTimingStructOutput,
        PlanAmountsStructOutput,
        bigint,
        PlanMetaStructOutput
      ] & {
        owner: string;
        tokens: PlanTokensStructOutput;
        timing: PlanTimingStructOutput;
        amounts: PlanAmountsStructOutput;
        status: bigint;
        meta: PlanMetaStructOutput;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestIdToPlanId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  requestIdToRecipient: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  requestIdToSender: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  requestProcessed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  resumePlan: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setExecutor: TypedContractMethod<
    [who: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerBatch: TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAllowedPair: TypedContractMethod<
    [
      fromToken: AddressLike,
      fromName: string,
      fromDecimals: BigNumberish,
      toToken: AddressLike,
      toName: string,
      toDecimals: BigNumberish,
      allowed: boolean
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BATCH_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_escrow"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_refund"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allPairs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint, boolean] & {
        from: string;
        fromName: string;
        fromDecimals: bigint;
        to: string;
        toName: string;
        toDecimals: bigint;
        allowed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowedPairs"
  ): TypedContractMethod<[key: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchReqIdToBatchId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, boolean] & {
        batchId: bigint;
        fromToken: string;
        toToken: string;
        totalInEnc: string;
        slotTime: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelPlan"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelReqIdToSender"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "cancelRequestIdToPlanId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelRequestProcessed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "createPlan"
  ): TypedContractMethod<
    [
      toToken: AddressLike,
      startTime: BigNumberish,
      encInterval: BytesLike,
      encTotalAmount: BytesLike,
      encAmountPerInterval: BytesLike,
      encTotalIntervals: BytesLike,
      proofs: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToPlan"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllPairs"
  ): TypedContractMethod<[], [PairStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "nextPlanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onBatchAmount"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedValue: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onCancelPlanDecrypt"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedAmount: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onCreatePlanDecryption"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedAmount: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onWithdrawCallback"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedValue: BigNumberish,
      signatures: BytesLike[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairBatchCursor"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pausePlan"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "plans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        PlanTokensStructOutput,
        PlanTimingStructOutput,
        PlanAmountsStructOutput,
        bigint,
        PlanMetaStructOutput
      ] & {
        owner: string;
        tokens: PlanTokensStructOutput;
        timing: PlanTimingStructOutput;
        amounts: PlanAmountsStructOutput;
        status: bigint;
        meta: PlanMetaStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestIdToPlanId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestIdToRecipient"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "requestIdToSender"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "requestProcessed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "resumePlan"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setExecutor"
  ): TypedContractMethod<
    [who: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerBatch"
  ): TypedContractMethod<
    [fromToken: AddressLike, toToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAllowedPair"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      fromName: string,
      fromDecimals: BigNumberish,
      toToken: AddressLike,
      toName: string,
      toDecimals: BigNumberish,
      allowed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BatchExecuted"
  ): TypedContractEvent<
    BatchExecutedEvent.InputTuple,
    BatchExecutedEvent.OutputTuple,
    BatchExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BatchTriggered"
  ): TypedContractEvent<
    BatchTriggeredEvent.InputTuple,
    BatchTriggeredEvent.OutputTuple,
    BatchTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorSet"
  ): TypedContractEvent<
    ExecutorSetEvent.InputTuple,
    ExecutorSetEvent.OutputTuple,
    ExecutorSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PairUpdated"
  ): TypedContractEvent<
    PairUpdatedEvent.InputTuple,
    PairUpdatedEvent.OutputTuple,
    PairUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PlanCancelled"
  ): TypedContractEvent<
    PlanCancelledEvent.InputTuple,
    PlanCancelledEvent.OutputTuple,
    PlanCancelledEvent.OutputObject
  >;
  getEvent(
    key: "PlanCreated"
  ): TypedContractEvent<
    PlanCreatedEvent.InputTuple,
    PlanCreatedEvent.OutputTuple,
    PlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PlanDeposit"
  ): TypedContractEvent<
    PlanDepositEvent.InputTuple,
    PlanDepositEvent.OutputTuple,
    PlanDepositEvent.OutputObject
  >;
  getEvent(
    key: "TransferCompleted"
  ): TypedContractEvent<
    TransferCompletedEvent.InputTuple,
    TransferCompletedEvent.OutputTuple,
    TransferCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TransferFailed"
  ): TypedContractEvent<
    TransferFailedEvent.InputTuple,
    TransferFailedEvent.OutputTuple,
    TransferFailedEvent.OutputObject
  >;

  filters: {
    "BatchExecuted(uint256,uint256,uint256)": TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;
    BatchExecuted: TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;

    "BatchTriggered(uint256,address,uint256)": TypedContractEvent<
      BatchTriggeredEvent.InputTuple,
      BatchTriggeredEvent.OutputTuple,
      BatchTriggeredEvent.OutputObject
    >;
    BatchTriggered: TypedContractEvent<
      BatchTriggeredEvent.InputTuple,
      BatchTriggeredEvent.OutputTuple,
      BatchTriggeredEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "ExecutorSet(address,bool)": TypedContractEvent<
      ExecutorSetEvent.InputTuple,
      ExecutorSetEvent.OutputTuple,
      ExecutorSetEvent.OutputObject
    >;
    ExecutorSet: TypedContractEvent<
      ExecutorSetEvent.InputTuple,
      ExecutorSetEvent.OutputTuple,
      ExecutorSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PairUpdated(address,address,bool)": TypedContractEvent<
      PairUpdatedEvent.InputTuple,
      PairUpdatedEvent.OutputTuple,
      PairUpdatedEvent.OutputObject
    >;
    PairUpdated: TypedContractEvent<
      PairUpdatedEvent.InputTuple,
      PairUpdatedEvent.OutputTuple,
      PairUpdatedEvent.OutputObject
    >;

    "PlanCancelled(uint256)": TypedContractEvent<
      PlanCancelledEvent.InputTuple,
      PlanCancelledEvent.OutputTuple,
      PlanCancelledEvent.OutputObject
    >;
    PlanCancelled: TypedContractEvent<
      PlanCancelledEvent.InputTuple,
      PlanCancelledEvent.OutputTuple,
      PlanCancelledEvent.OutputObject
    >;

    "PlanCreated(uint256,address)": TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;
    PlanCreated: TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;

    "PlanDeposit(uint256,bytes32)": TypedContractEvent<
      PlanDepositEvent.InputTuple,
      PlanDepositEvent.OutputTuple,
      PlanDepositEvent.OutputObject
    >;
    PlanDeposit: TypedContractEvent<
      PlanDepositEvent.InputTuple,
      PlanDepositEvent.OutputTuple,
      PlanDepositEvent.OutputObject
    >;

    "TransferCompleted(uint256,address,address,uint256)": TypedContractEvent<
      TransferCompletedEvent.InputTuple,
      TransferCompletedEvent.OutputTuple,
      TransferCompletedEvent.OutputObject
    >;
    TransferCompleted: TypedContractEvent<
      TransferCompletedEvent.InputTuple,
      TransferCompletedEvent.OutputTuple,
      TransferCompletedEvent.OutputObject
    >;

    "TransferFailed(uint256,address,address,uint256,string)": TypedContractEvent<
      TransferFailedEvent.InputTuple,
      TransferFailedEvent.OutputTuple,
      TransferFailedEvent.OutputObject
    >;
    TransferFailed: TypedContractEvent<
      TransferFailedEvent.InputTuple,
      TransferFailedEvent.OutputTuple,
      TransferFailedEvent.OutputObject
    >;
  };
}
